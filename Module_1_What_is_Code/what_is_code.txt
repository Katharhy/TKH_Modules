Module 1: What is code?

Reading and reflection.

In your own words, what is a computer really doing whenever you type a letter on a keyboard? (150 words max)

The computer does not recognize objects as a human does. The letter “c” in the computer is not an object of image “c” that holds shape “c” to project on the computer screen. What a person sees on the screen is the translation of a command (“signal”) that tells the computer in a series of sequences to print the letter ”c” on the screen. First, when the key [c] on the keyboard is pressed, it sends a command to the interior of the computer memory to locate the folder fonts. Second, the signal orders to search in the folder fonts for zero and ones that represent lines and circles respectively. Then, the computer memory takes the lines and circles and reshape them to an image object “c”. This rendered object “c” is finally passed through a command translator that interprets the key [c] press signal on the keyboard on the screen. 

In your own words, how do computers use input and output to create experiences? (250 words max)

The memory of computers come with a series of installed folders containing thousands of executions. These executions need inputs in the form of commands, i.e., signals, to generate an output, which projects an experience onto the computer screen. Let’s go back to the scenario of printing the letter “c” on a text file, which appears on the computer screen. The experience of printing the letter “c” is created by the memory stored executions that took the input of pressing the key [c] on the keyboard. Store executions facilitate to tell the computer to look for files on the computer, such as typing on spotlight research (macOS) the name of a file. The computer takes the file name (input) and looks inside stored folders for characters that match each character on the input signal. The return (output) brings out the files that either partially or entirely match the experience. The different command executions take signal inputs generating an output that is projected onto the screen as an expression of the command that humans recognize as objects.  

Explain why software products are essential “infinitely reproducible nothings.” (150 words max)

Let’s consider software products as a place holding copious amounts of experiences. The software in the sense is continuously evolving and updating execution commands. So, the software has a blueprint that could be reproduced into other operating systems or applications to do similar execution with sophisticated experience outputs. Let’s bring the signal -> execution -> translation -> experience of printing a letter. The essential execution to carry out the printing of a letter to a text file is closely related in MS word and Google docs, but Google took a desktop native software to reproduce it on the web. It is perhaps the software’s evolving capacity that allows reproducibility to reach infinite nothings to develop and facilitate new and better experiences.  

Explain in your own words how code becomes software. (150 words max)

A computer takes a code line to “solve a problem”, i.e., commands. Each code needs an explicit definition to move one step at the time. These steps then are executed by stored logical functions that take one step matches internal characters and symbols, and if it matches, it moves to step two. If we want an image store in the folder pictures, the computer needs to know where the folder is located. Imaging for a moment that the search bar on the screen is the stem of a plant, and what is underneath is the roots of this plant. Thus, when we type “image” in the search bar, the computer recognizes the command “image” as a to-do list that starts at the stem and moves along with the roots until it locates the folder pictures and inside matches the characters “image” to print it onto the screen. 

Explain “algorithms” in your own words. (150 words max)

An algorithm can be thought of as a massive flowchart that aims to solve an issue, and the development of algorithms is also a mathematical process that tries to find the shortest connecting path to the execution, i.e., solve the problem. Programming languages bring the structural format to algorithms for reusability and applicability. Inside a programming language, the algorithm can be reshaped into a function that repeats command tasks executing when the command is called. Algorithms can exist outside computers like a massive flowchart and inside where they can be built, stored, and reapplied to an application that simulates new experiences. Face recognition applications bundle up hundreds of algorithms organized in a series of logical functions that take image pixels and break them into small possible symbols to match store files. Then, the algorithms through the computer create a fake human interaction. 

Explain the DRY principle. (100 words max)

“A good programmer is a laidback programmer” Meaning a programmer needs to find a way to not have to repeat tasks over and over. Similarly, the DRY principle invites programmers to carefully constructed code lines and structure functions so that they can be called again and again without the need to type each code line and functions everything. The computer needs to become an object where repeating tasks are done. So, the laidback programmer name, create and do each task once. Therefore, functions should be defined for human readability where programmers can know what the function does.

In your own words, what is object-oriented programming? (100 words max)

The nonobject-oriented approach like C provides an overview of the world. However, programming languages like C can create programming issues that are difficult to resolve since it does not have a central folder housing the variables, code lines, and functions. An object-oriented programming language tries to create a hierarchical framework that resembles the real world, i.e., species taxonomy. Also, it can be thought of as a Russian doll where it nests one doll inside another. This hierarchical systematization allows sharability and teamwork since the code lines connect to one domain system file, which updates and modifications can be traced.   

In your own words explain data and how it relates to code. (100 Words max)

What came first the data or code. Data in simple terms is information and we have been generating data before computers, but since the age of computers, data have bloomed. Code as codex brought the structural organization to manage ancient scrolls (data) it aims to manage, store, collect, and apply data. Code lines build the necessary structural pipelines for data to move out of the datasets into executable experiences. Code lines create the meaning of the data on the object that is expressed. So, what we see is the codex version of many organized scrolls in a sequential format. 

What is a framework? (150 words max)

It is a structure that facilities the creation of products or services by solving mundane problems. The framework contains shelves like directories, libraries, and services that try to solve general problems when building a product while helping to maintain the datasets organized. The framework can have capability limitations depending on the server speed, control, and accessibility. At present, there are several framework options per each language that often are open access. Frameworks prevent programmers from trying to do something outside the scope of the frame. If we are building a website, using the appropriate pre-built framework can help to arrange the frame of the site accurately, safe time, and cost.

What is debugging? (150 words max)

Bugs are a signal in the code line to tell the programmer that something went wrong and the operation stop running. So, debugging is a way to solve the issues that cease the execution of the software. Let’s think of debugging as a doctor looking inside the piles of code lines for symptoms that give hits to errors. The programmer spots the dug and writes or edits the code line to eliminate the error; thereby a programmer is a debugger looking to correct system errors. Perhaps there is not an actual cure to the errors due to the evolving nature of programming language and data. However, by sophisticating the relationship between the programmers and the language, we learn to quickly recognize the language hits to control and debug errors. 

Now, with more of an understanding of what code is, why do you want to learn how to code? (500 words max)

There is a lot of disorder all around us. Programming helps to bring order to much of this disorder. Even though for much of the society it might not be clear, data through code lines manipulated inside a programing language run much of society’s decisions. Personally, I learned that coding can help to organize, structure, execute, and create impossible experiences. Since data is being generated on a daily basis in all fields, such as medicine, social media, science, I want to learn how to code to couple this skill with pre-built frameworks to build a product to share information. Coding enables fake human interactions that help humanity to solve and make a decision to either improve life or no do anything. By learning how to code, I see the potential to systematically deal with the massive amounts of data that for society does not mean anything until it is interpreted into human-readable language. In a center way, coding offers the opportunity to create order where disorder seems to dominate. 
